diff -urN ../snort-2.9.5.5.old/src/output-plugins/Makefile.am ./src/output-plugins/Makefile.am
--- ../snort-2.9.5.5.old/src/output-plugins/Makefile.am	2013-03-21 11:46:36.000000000 +0000
+++ ./src/output-plugins/Makefile.am	2013-03-21 11:47:41.000000000 +0000
@@ -13,6 +13,7 @@
 spo_unified2.c spo_unified2.h \
 spo_log_ascii.c spo_log_ascii.h \
 spo_alert_sf_socket.h spo_alert_sf_socket.c \
-spo_alert_test.c spo_alert_test.h
+spo_alert_test.c spo_alert_test.h \
+spo_pf.h spo_pf.c
 
 INCLUDES = @INCLUDES@
diff -urN ../snort-2.9.5.5.old/src/output-plugins/Makefile.in ./src/output-plugins/Makefile.in
--- ../snort-2.9.5.5.old/src/output-plugins/Makefile.in	2013-03-21 11:46:36.000000000 +0000
+++ ./src/output-plugins/Makefile.in	2013-03-21 11:48:55.000000000 +0000
@@ -70,7 +70,8 @@
	spo_alert_unixsock.$(OBJEXT) spo_csv.$(OBJEXT) \
	spo_log_null.$(OBJEXT) spo_log_tcpdump.$(OBJEXT) \
	spo_unified2.$(OBJEXT) spo_log_ascii.$(OBJEXT) \
-	spo_alert_sf_socket.$(OBJEXT) spo_alert_test.$(OBJEXT)
+	spo_alert_sf_socket.$(OBJEXT) spo_alert_test.$(OBJEXT) \
+	spo_pf.$(OBJEXT)
 libspo_a_OBJECTS = $(am_libspo_a_OBJECTS)
 DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
 depcomp =
@@ -237,7 +238,8 @@
 spo_unified2.c spo_unified2.h \
 spo_log_ascii.c spo_log_ascii.h \
 spo_alert_sf_socket.h spo_alert_sf_socket.c \
-spo_alert_test.c spo_alert_test.h
+spo_alert_test.c spo_alert_test.h \
+spo_pf.h spo_pf.c
 
 all: all-am
 
diff -urN ../snort-2.9.5.5.old/src/output-plugins/spo_pf.c ./src/output-plugins/spo_pf.c
--- ../snort-2.9.5.5.old/src/output-plugins/spo_pf.c	1970-01-01 00:00:00.000000000 +0000
+++ ./src/output-plugins/spo_pf.c	2013-03-21 11:51:04.000000000 +0000
@@ -0,0 +1,475 @@
+/*
+* Copyright (c) 2012  Ermal Lu√i
+* Copyright (c) 2006  Antonio Benojar <zz.stalker@gmail.com>
+* Copyright (c) 2005  Antonio Benojar <zz.stalker@gmail.com>
+*
+* Copyright (c) 2003, 2004 Armin Wolfermann:
+* 
+* s2c_pf_block and s2c_pf_unblock functions are based 
+* in Armin's Wolfermann pftabled-1.03 functions.
+*
+* All rights reserved.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions
+* are met:
+*
+* 1. Redistributions of source code must retain the above copyright
+*    notice, this list of conditions and the following disclaimer.
+*
+* 2. Redistributions in binary form must reproduce the above copyright
+*    notice, this list of conditions and the following disclaimer in the
+*    documentation and/or other materials provided with the distribution.
+*
+* THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR
+* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+* IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "event.h"
+#include "decode.h"
+#include "plugbase.h"
+#include "spo_plugbase.h"
+#include "parser.h"
+#include "util.h"
+#include "log.h"
+#include "mstring.h"
+
+#include "snort.h"
+
+#include "spo_pf.h"
+
+#ifdef HAVE_STRINGS_H
+#include <strings.h>
+#endif
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <arpa/inet.h>
+#include <errno.h>
+                        
+#include <sys/types.h>
+#include <sys/ioctl.h>
+#include <sys/socket.h>
+#include <sys/stat.h>
+#include <sys/queue.h>
+#include <ctype.h>
+#include <fcntl.h>
+#include <net/if.h>
+#include <net/pfvar.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+#include <err.h>
+#include <unistd.h>
+#include <regex.h>
+
+#define PFDEVICE        "/dev/pf"
+
+enum spblock { SPOINK_BLOCK_SRC, SPOINK_BLOCK_DST, SPOINK_BLOCK_BOTH };
+
+#define WLMAX   1024
+
+struct ipwlist {
+  sfip_t waddr;
+  LIST_ENTRY(ipwlist) elem;
+};
+
+LIST_HEAD(wlist_head, ipwlist);
+
+typedef struct _SpoAlertPfData {
+    char *wlfile; 
+    char *pftable; 
+    int fd;
+    int kill;
+    enum spblock block;
+    struct wlist_head head;
+} SpoAlertPfData;
+
+void AlertPfInit(struct _SnortConfig *, char *);
+static SpoAlertPfData *ParseAlertPfArgs(char *);
+void AlertPf(Packet *, char *, void *, Event *);
+void AlertPfCleanExit(int, void *);
+void AlertPfRestart(struct _SnortConfig *, int, void *);
+
+static int s2c_pf_init(void);
+static int s2c_pf_block(SpoAlertPfData *, snort_ip *);
+static int s2c_pf_intbl(int, char *, int);
+
+static int s2c_parse_line(char *, FILE*);
+static int s2c_parse_load_wl(FILE*, struct wlist_head*, int);
+static int s2c_parse_search_wl(snort_ip *, struct wlist_head);
+static int s2c_parse_free_wl(struct wlist_head*);
+
+ 
+void AlertPfSetup(void)
+{
+    RegisterOutputPlugin("alert_pf", OUTPUT_TYPE__ALERT, AlertPfInit);
+    
+    DEBUG_WRAP(DebugMessage(DEBUG_INIT,"Output plugin: AlertPf is setup...\n"););
+}
+
+void AlertPfInit(struct _SnortConfig *sc, char *args)
+{
+    SpoAlertPfData *data;
+    DEBUG_WRAP(DebugMessage(DEBUG_INIT, "Output: AlertPf Initialized\n"););
+    
+    //pv.alert_plugin_active = 1;
+
+    data = ParseAlertPfArgs(args);
+    		
+    DEBUG_WRAP(DebugMessage(DEBUG_INIT,"Linking AlertPf functions to call lists...\n"););
+
+    AddFuncToOutputList(sc, AlertPf, OUTPUT_TYPE__ALERT, data);
+    AddFuncToCleanExitList(AlertPfCleanExit, data);
+#ifdef SNORT_RELOAD
+    AddFuncToReloadList(AlertPfRestart, data);
+#endif
+}
+
+
+void AlertPf(Packet *p, char *msg, void *arg, Event *event)
+{
+    SpoAlertPfData *data = (SpoAlertPfData *)arg;
+    snort_ip *ip;
+    
+    DEBUG_WRAP(DebugMessage(DEBUG_LOG, "spoink block'n!!\n"););
+
+    switch (data->block) {
+    case SPOINK_BLOCK_DST:
+	ip = GET_DST_IP(p);
+	break;
+    case SPOINK_BLOCK_BOTH:
+	ip = GET_DST_IP(p);
+	if (!s2c_parse_search_wl(ip, data->head))
+		s2c_pf_block(data, ip);
+	/* CONTINUE */
+    case SPOINK_BLOCK_SRC:
+    default:
+	ip = GET_SRC_IP(p);
+	break;
+    }
+    if (s2c_parse_search_wl(ip, data->head))
+	return;
+
+    s2c_pf_block(data, ip);
+
+    return;
+}
+
+static SpoAlertPfData *
+ParseAlertPfArgs(char *args)
+{
+    char **toks;
+    int num_toks;
+    SpoAlertPfData *data;
+    FILE *wl;
+    
+    int res = 0;
+    
+    data = (SpoAlertPfData *)SnortAlloc(sizeof(SpoAlertPfData));
+    
+    if(args == NULL) 
+	FatalError("Unable to load alert_pf args: %s\n", strerror(errno));    
+
+    data->fd = s2c_pf_init();
+    if (data->fd == -1)
+    	FatalError("s2c_pf_init() => no pf device\n");
+    
+    DEBUG_WRAP(DebugMessage(DEBUG_LOG,"ParseAlertPfArgs: %s\n", args););
+
+    toks = mSplit(args, ",", 4, &num_toks, 0);
+    
+    if(num_toks <= 1) 
+        FatalError("snort.conf => You must supply TWO arguments for the pf plugin...: %s\n", strerror(errno));
+
+    if(strstr(toks[0], "..") != NULL) 
+        FatalError("snort.conf => File definition contains \"..\".  Do not do that!\n");
+
+    data->wlfile = strdup(toks[0]);
+    wl = fopen(data->wlfile, "r");
+    if (wl == NULL)
+	FatalError("snort.conf => Unable to open whitelist file: %s\n", strerror(errno));
+    res = s2c_parse_load_wl(wl, &data->head, 0);
+    if (res == -1)
+    	FatalError("snort.conf => Unable to load whitelist: %s\n", strerror(errno)); 
+    fclose(wl);
+
+    if (toks[1] == NULL)
+     	FatalError("snort.conf => No pf table defined %s\n", strerror(errno));                
+    else
+     	data->pftable = strdup(toks[1]);
+
+    if (s2c_pf_intbl(data->fd, data->pftable, 0) == 0)
+    	FatalError("pf.conf => Table %s don't exists in packet filter: %s\n", data->pftable, strerror(errno));	
+
+    if (toks[2] == NULL)
+	data->block = SPOINK_BLOCK_SRC;
+    else if (!strncmp("src", toks[2], strlen("src")))
+     	data->block = SPOINK_BLOCK_SRC;
+    else if (!strncmp("dst", toks[2], strlen("dst")))
+     	data->block = SPOINK_BLOCK_DST;
+    else if (!strncmp("both", toks[2], strlen("both")))
+     	data->block = SPOINK_BLOCK_BOTH;
+    else
+     	data->block = SPOINK_BLOCK_SRC;
+
+    if (toks[3] == NULL)
+     	data->kill = 0;
+    else if (!strncmp("kill", toks[3], strlen("kill")))
+	data->kill = 1;
+    else
+     	data->kill = 0;
+
+    return data;
+}
+
+void AlertPfCleanExit(int signal, void *arg)
+{
+    SpoAlertPfData *data = (SpoAlertPfData *)arg;
+    DEBUG_WRAP(DebugMessage(DEBUG_LOG,"AlertPfCleanExit\n"););
+ 
+    s2c_parse_free_wl(&data->head);
+    close(data->fd);
+
+    if(data->pftable != NULL)
+	free(data->pftable);
+    if(data->wlfile != NULL)
+	free(data->wlfile);
+    free(data);
+}
+
+void AlertPfRestart(struct _SnortConfig *sc, int signal, void *arg)
+{
+    SpoAlertPfData *data = (SpoAlertPfData *)arg;
+    FILE *wl; int res;
+
+    DEBUG_WRAP(DebugMessage(DEBUG_LOG,"AlertPfRestart\n"););
+    
+    s2c_parse_free_wl(&data->head);
+    if (data->wlfile == NULL)
+	FatalError("Missing whitelist file from arguments");
+    wl = fopen(data->wlfile, "r");
+    if (wl == NULL)
+	FatalError("snort.conf => Unable to open whitelist file: %s\n", strerror(errno));
+    res = s2c_parse_load_wl(wl, &data->head, 0);
+    if (res == -1)
+    	FatalError("snort.conf => Unable to load whitelist: %s\n", strerror(errno)); 
+    fclose(wl);
+}
+
+
+static int
+s2c_pf_init(void)
+{
+	return(open(PFDEVICE, O_RDWR));
+}
+
+static int
+s2c_pf_block(SpoAlertPfData *data, snort_ip *net_addr) 
+{ 
+	struct pfioc_table io; 
+    	struct pfr_table table; 
+      	struct pfr_addr addr; 
+
+	if (data->fd < 0)
+		s2c_pf_init();
+	if (data->fd == -1) {
+		ErrorMessage("s2c_pf_init() => no pf device\n");
+		return -1;
+	}
+
+        memset(&io,    0x00, sizeof(struct pfioc_table)); 
+        memset(&table, 0x00, sizeof(struct pfr_table)); 
+        memset(&addr,  0x00, sizeof(struct pfr_addr)); 
+            
+        strlcpy(table.pfrt_name, data->pftable, PF_TABLE_NAME_SIZE); 
+        
+        net_addr->family == AF_INET ? memcpy(&addr.pfra_ip4addr.s_addr, &net_addr->ip32, sizeof(in_addr_t)) : memcpy(&addr.pfra_ip6addr, net_addr->ip8, sizeof(struct in6_addr));
+
+        addr.pfra_af  = net_addr->family; 
+        addr.pfra_net = net_addr->family == AF_INET ? 32 : 128;; 
+
+        io.pfrio_table  = table; 
+        io.pfrio_buffer = &addr; 
+        io.pfrio_esize  = sizeof(addr); 
+        io.pfrio_size   = 1; 
+        
+        if (ioctl(data->fd, DIOCRADDADDRS, &io))
+		ErrorMessage("s2c_pf_block() => ioctl() DIOCRADDADDRS: %s\n", strerror(errno));
+ 
+	if (data->kill) {
+		struct pfioc_state_kill psk;
+
+		memset(&psk, 0, sizeof(psk));
+		memset(&psk.psk_src.addr.v.a.mask, 0xff, sizeof(psk.psk_src.addr.v.a.mask));
+		psk.psk_af = net_addr->family;
+		if (psk.psk_af == AF_INET)
+			memcpy(&psk.psk_src.addr.v.a.addr.v4.s_addr, &net_addr->ip32, sizeof(in_addr_t));
+		else if (psk.psk_af == AF_INET6)
+			memcpy(&psk.psk_src.addr.v.a.addr.v6, net_addr->ip8, sizeof(struct in6_addr));
+		else
+			return (-1);
+
+		/* XXX: Should ignore? */
+		ioctl(data->fd, DIOCKILLSTATES, &psk);
+
+		memset(&psk, 0, sizeof(psk));
+		memset(&psk.psk_dst.addr.v.a.mask, 0xff, sizeof(psk.psk_dst.addr.v.a.mask));
+		psk.psk_af = net_addr->family;
+		if (psk.psk_af == AF_INET)
+			memcpy(&psk.psk_dst.addr.v.a.addr.v4.s_addr, &net_addr->ip32, sizeof(in_addr_t));
+		else if (psk.psk_af == AF_INET6)
+			memcpy(&psk.psk_dst.addr.v.a.addr.v6, &net_addr->ip8, sizeof(struct in6_addr));
+		else
+			return (-1);
+
+		/* XXX: Should ignore? */
+		ioctl(data->fd, DIOCKILLSTATES, &psk);
+
+	}
+        return(0); 
+}
+
+static int
+s2c_pf_intbl(int dev, char * tablename, int debug)
+{
+	int i;
+	struct pfioc_table io;
+	struct pfr_table *table_aux = NULL;
+	
+	memset(&io, 0x00, sizeof(struct pfioc_table));
+	
+	io.pfrio_buffer = table_aux;
+	io.pfrio_esize  = sizeof(struct pfr_table);
+	io.pfrio_size   = 0;
+	
+	if(ioctl(dev, DIOCRGETTABLES, &io))  
+		FatalError("s2c_pf_intbl() => ioctl() DIOCRGETTABLES: %s\n", strerror(errno));
+	
+	table_aux = (struct pfr_table*)malloc(sizeof(struct pfr_table)*io.pfrio_size);
+	
+	if (table_aux == NULL) 
+		FatalError("s2c_pf_intbl() => malloc(): %s\n", strerror(errno));
+	
+	io.pfrio_buffer = table_aux;
+	io.pfrio_esize = sizeof(struct pfr_table);
+	
+	if(ioctl(dev, DIOCRGETTABLES, &io)) 
+		FatalError("s2c_pf_intbl() => ioctl() DIOCRGETTABLES: %s\n", strerror(errno));
+
+	for(i=0; i< io.pfrio_size; i++) {
+		if (!strcmp(table_aux[i].pfrt_name, tablename))
+			return 1;	
+	}
+	
+	return 0;
+
+}
+
+
+static int
+s2c_parse_line(char buf[WLMAX], FILE* wfile)
+{
+	static char     next_ch = '\n';
+        int             i = 0;
+
+	if (feof(wfile))
+	        return (0);
+
+	do {
+		next_ch = fgetc(wfile);
+		if (i < WLMAX)
+	        	buf[i++] = next_ch;
+	} while (!feof(wfile) && next_ch != '\n');
+	if (i >= WLMAX)
+		return (-1);
+
+	buf[--i] = '\0';
+
+	return (1);
+}
+
+static int
+s2c_parse_load_wl(FILE *wfile, struct wlist_head *head, int debug)
+{
+	struct ipwlist *ipw = NULL;
+	struct flock lock;
+	char cad[WLMAX];
+	int ret;
+
+	if (wfile == NULL)
+		FatalError("s2c_parse_load_wl() => Unable to open whitelist file: %s\n", strerror(errno));
+
+	memset(&lock, 0x00, sizeof(struct flock));
+	lock.l_type = F_RDLCK;
+	fcntl(fileno(wfile), F_SETLKW, &lock);
+
+	LIST_INIT(head);
+
+	memset(cad, 0, WLMAX);
+	while((ret = s2c_parse_line(cad, wfile)) != 0) {
+		if (ret == 1) {
+			ipw = malloc(sizeof(struct ipwlist));
+			if (ipw == NULL) {
+				ErrorMessage("Could not allocate memory");
+				continue;
+			}
+			if (sfip_pton(cad, &ipw->waddr) != SFIP_SUCCESS) {
+				ErrorMessage("Non ip(%s) parameter passed with white list, skipping...", cad);
+				free(ipw);
+				continue;
+			} // else
+				//printf("IP(%s) parsed succesfuly", cad);
+
+			LIST_INSERT_HEAD(head, ipw, elem);		
+		} else 
+			ErrorMessage("Errors with line(%s) passed with white list, skipping...", cad);
+	}
+
+	lock.l_type = F_UNLCK;
+	fcntl(fileno(wfile), F_SETLKW, &lock);
+
+	return (0);
+}
+
+static int
+s2c_parse_search_wl(snort_ip *ip, struct wlist_head wl)
+{
+	struct ipwlist *aux2;	
+
+	LIST_FOREACH(aux2, &wl, elem) {
+		if (sfip_contains(&aux2->waddr, ip) == SFIP_CONTAINS)
+			return 1;
+	}
+
+	return (0);
+}
+
+
+static int
+s2c_parse_free_wl(struct wlist_head *wl)
+{
+	struct ipwlist *aux, *aux2;
+	for(aux = LIST_FIRST(wl); aux != NULL; aux = aux2) {
+		aux2 = LIST_NEXT(aux, elem);
+		LIST_REMOVE(aux, elem);		
+		free(aux);
+	}
+	if (LIST_EMPTY(wl)) { 
+		return (1);
+	} else { 
+		ErrorMessage("s2c_parse_free_wl() => Unable to free whitelist: %s\n", strerror(errno));
+		return (0);
+	}
+}
diff -urN ../snort-2.9.5.5.old/src/output-plugins/spo_pf.h ./src/output-plugins/spo_pf.h
--- ../snort-2.9.5.5.old/src/output-plugins/spo_pf.h	1970-01-01 00:00:00.000000000 +0000
+++ ./src/output-plugins/spo_pf.h	2013-03-21 11:47:02.000000000 +0000
@@ -0,0 +1,36 @@
+/*
+*
+* Copyright (c) 2006  Antonio Benojar <zz.stalker@gmail.com>
+* Copyright (c) 2005  Antonio Benojar <zz.stalker@gmail.com>
+*
+* All rights reserved.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions
+* are met:
+*
+* 1. Redistributions of source code must retain the above copyright
+*    notice, this list of conditions and the following disclaimer.
+*
+* 2. Redistributions in binary form must reproduce the above copyright
+*    notice, this list of conditions and the following disclaimer in the
+*    documentation and/or other materials provided with the distribution.
+*
+* THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR
+* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+* IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+#ifndef __SPO_PF_H__
+#define __SPO_PF_H__
+
+void AlertPfSetup(void);
+
+#endif 
diff -urN ../snort-2.9.5.5.old/src/plugbase.c ./src/plugbase.c
--- ../snort-2.9.5.5.old/src/plugbase.c	2013-03-21 11:46:37.000000000 +0000
+++ ./src/plugbase.c	2013-03-21 14:13:07.000000000 +0000
@@ -114,6 +114,7 @@
 #include "output-plugins/spo_unified.h"
 #include "output-plugins/spo_log_null.h"
 #include "output-plugins/spo_log_ascii.h"
+#include "output-plugins/spo_pf.h"
 #include "output-plugins/spo_unified2.h"
 
 #ifdef LINUX
@@ -1547,6 +1548,7 @@
     LogTcpdumpSetup();
     AlertFastSetup();
     AlertFullSetup();
+    AlertPfSetup();
 #ifndef WIN32
     /* Win32 doesn't support AF_UNIX sockets */
     AlertUnixSockSetup();
